@page "/contact"
@rendermode InteractiveServer
@using Portfolio.wwwroot
@using System.Net.Mail
@using System.Net.Security
@using System.Security.Cryptography.X509Certificates
@inject NotificationService notify

<RadzenNotification></RadzenNotification>
<br/>
<div style="margin: 20px">
<EditForm Model="@contactModel" OnValidSubmit="@HandleValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-row">
        <div class="form-group col-lg-6">
            <label class="required font-weight-bold text-dark text-2">Nom complet</label>
            <InputText type="text" @bind-Value="contactModel.FromName" maxlength="100" class="form-control" name="name" required />
            <ValidationMessage For="@(() => contactModel.FromName)" />
        </div>
        <div class="form-group col-lg-6">
            <label class="required font-weight-bold text-dark text-2">Adresse Email</label>
            <InputText type="email" @bind-Value="contactModel.FromEmail"  maxlength="100" class="form-control" name="email" required />
            <ValidationMessage For="@(() => contactModel.FromEmail)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label class="required font-weight-bold text-dark text-2">Sujet</label>
            <InputText type="text" @bind-Value="contactModel.Subject" maxlength="100" class="form-control" name="subject" required />
            <ValidationMessage For="@(() => contactModel.Subject)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label class="required font-weight-bold text-dark text-2">Message</label>
            <RadzenHtmlEditor @bind-Value=@contactModel.Message style="height: 300px;" UploadUrl="upload/image" />
            @* <InputTextArea maxlength="5000" @bind-Value="contactModel.Message" rows="5" class="form-control" name="message" required></InputTextArea> *@
            <ValidationMessage For="@(() => contactModel.Message)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <input type="submit" value="Envoyer le message" class="btn btn-primary btn-modern">
        </div>
    </div>
</EditForm>
</div>
<footer>
    <div class="col-sm-3 work-item sc-item">
        <a href="https://www.linkedin.com/in/alexandre-dauba-0550a3284/" data-toggle="modal" data-target="#hockey" target="_blank" rel="noopener noreferrer">
            <img class="img-fluid" src="images/linkedin.png" alt="Linkedin"/>
        </a>
    </div>
</footer>


@code {
    private NavigationManager uriHelper;
    
    private ContactModel contactModel = new ContactModel();
    private async Task HandleValidSubmit()
    {
        notify.Notify(new NotificationMessage() { Detail = "Message envoyé avec succès", Severity = NotificationSeverity.Success, Duration = 5000 });
        var mySmtpClient = new SmtpClient("smtp.gmail.com", 587);
        mySmtpClient.UseDefaultCredentials = false;
        var basicAuthenticationInfo = new System.Net.NetworkCredential("portfolio.aaerin@gmail.com", "dwnrrnupbjcdoaer");
        mySmtpClient.Credentials = basicAuthenticationInfo;
        var from = new MailAddress("portfolio.aaerin@gmail.com", "Contact_form");
        var to = new MailAddress("portfolio.aaerin@gmail.com", "Portfolio");
        var myMail = new System.Net.Mail.MailMessage(from, to);

        myMail.Subject = "Contact Portfolio";
        myMail.SubjectEncoding = System.Text.Encoding.UTF8;

        myMail.Body = $"<b>Envoyé depuis le formulaire de contact Portfolio</b> : {contactModel.Subject}<br>De : {contactModel.FromName} <{contactModel.FromEmail}><br><br>{contactModel.Message}";
        myMail.BodyEncoding = System.Text.Encoding.UTF8;
        myMail.IsBodyHtml = true;

        System.Net.ServicePointManager.ServerCertificateValidationCallback = ServerCertificateValidationCallback;
        mySmtpClient.EnableSsl = true;
        mySmtpClient.Send(myMail);
        System.Net.ServicePointManager.ServerCertificateValidationCallback = null;
    }

    private bool ServerCertificateValidationCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslpolicyerrors) => true;
}